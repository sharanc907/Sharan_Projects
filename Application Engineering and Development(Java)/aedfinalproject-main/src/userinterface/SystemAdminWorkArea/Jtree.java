/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.DeliveryMan.DeliveryMan;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author raksh
 */
public class Jtree extends javax.swing.JPanel {

    private final JPanel container;
    private final EcoSystem ecosystem;

    /**
     * Creates new form Jtree
     */
    public Jtree(JPanel container,EcoSystem ecosystem) {
        initComponents();
        this.container=container;
        this.ecosystem=ecosystem;
        populateTree();
    }

     public void populateTree(){
        DefaultTreeModel model=(DefaultTreeModel)jTree1.getModel();
         
        CustomerDirectory customerDirectory = ecosystem.getCustomerDirectory();
        // get all directory
        
        DefaultMutableTreeNode customers = new DefaultMutableTreeNode("Customer");
        // create node for each -> rest, deliver
        DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();
        root.removeAllChildren();
        
        
        root.insert(customers, 0);
        // 0
        // rest -> 1
        // deliver - 2
        
        DefaultMutableTreeNode customerNode;
        int count = 0;
        for(Customer c : customerDirectory.getA()){
              customerNode = new DefaultMutableTreeNode(c.getFirstname() + " " + c.getLastname());
              customers.insert(customerNode, count);
              count++;
        }
        
        //count = 0;
        // DefaultMutableTreeNode restaurantNode;
        
        RestaurantDirectory customerDirectory1 = ecosystem.getRestaurantDirectory();
        // get all directory
        
        DefaultMutableTreeNode customers1 = new DefaultMutableTreeNode("Restaurant");
        // create node for each -> rest, deliver
//        DefaultMutableTreeNode root1=(DefaultMutableTreeNode)model.getRoot();
//        root1.removeAllChildren();
        
        
        root.insert(customers1, 1);
        // 0
        // rest -> 1
        // deliver - 2
        
        DefaultMutableTreeNode customerNode1;
        int count1 = 0;
        for(Restaurant c : customerDirectory1.getRestaurantList()){
              customerNode1 = new DefaultMutableTreeNode(c.getName());
              customers1.insert(customerNode1, count1);
              count1++;
        }
        
        DeliveryManDirectory customerDirectory2 = ecosystem.getDeliveryManDirectory();
        DefaultMutableTreeNode customers2 = new DefaultMutableTreeNode("Delivery Partner");
        root.insert(customers2, 2);
        DefaultMutableTreeNode customerNode2;
        int count2 = 0;
        for(DeliveryMan c : customerDirectory2.getDeliveryManList()){
              customerNode2 = new DefaultMutableTreeNode(c.getFirstname()+" "+c.getLastname());
              customers2.insert(customerNode2, count2);
              count2++;
        }
    
        model.reload();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setViewportView(jTree1);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setText("J Tree ");

        jLabel2.setText("<<back");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(260, 260, 260)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        backAction();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void backAction() {
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel manageSuppliersJPanel = (SystemAdminWorkAreaJPanel) component;        
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
