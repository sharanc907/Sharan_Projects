--------------------------------------------------------------------------TABLE CREATION SCRIPT (PROCEDURE)--------------------------------------------------------------------------

-------------------------USERTYPE TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure usertype_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE USERTYPE (
                USER_TYPE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
                USER_TYPE VARCHAR(20) constraint IDX_USERTYPE UNIQUE NOT NULL,
                charges NUMBER NOT NULL,
                constraint PK_USER_TYPE_ID PRIMARY KEY(USER_TYPE_ID))';
   EXECUTE IMMEDIATE table_name;
end usertype_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'USERTYPE';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE USERTYPE ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             usertype_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE USERTYPE CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             usertype_creation;
             dbms_output.put_line('Hence,Table Created');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------USER1 TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure user_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE USER1(
                 user_id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 First_Name VARCHAR(50) NOT NULL,
                 Last_Name VARCHAR(50) NOT NULL,
                 Email VARCHAR(50) NOT NULL,
                 user_name VARCHAR(50) NOT NULL,
                 Phone_Number NUMBER(10) NOT NULL,
                 user_Location VARCHAR(25) NOT NULL,
                 ID_Proof VARCHAR(25) NOT NULL,
                 user_Type_ID NUMBER,
				 CHECK(REGEXP_LIKE(Email,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
                 CHECK(REGEXP_LIKE(user_name,''^[A-Za-z0-9]{1,16}$'')),
                 CHECK(REGEXP_LIKE(Phone_Number,''^[0-9]{10}$'')),
                 constraint PK_USER_ID PRIMARY KEY(USER_ID),
                 FOREIGN KEY (user_Type_ID) REFERENCES usertype(User_Type_ID))';
   EXECUTE IMMEDIATE table_name;
end user_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'USER1';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE USER1 ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             user_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE USER1 CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             user_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------DISTRIBUTOR TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure distributor_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE DISTRIBUTOR(
                distributor_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                rate_per_unit NUMBER NOT NULL,
                distributor_name VARCHAR2(25) NOT NULL,
                constraint PK_DISTRIBUTOR_ID PRIMARY KEY(distributor_ID))';
   EXECUTE IMMEDIATE table_name;
end distributor_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'DISTRIBUTOR';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE DISTRIBUTOR ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             distributor_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE DISTRIBUTOR CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             distributor_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------STATION TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure station_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE STATION(
                station_id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                station_name VARCHAR2(50) NOT NULL,
                latitude DECIMAL(20,10) NOT NULL,
                longitude DECIMAL(20,10) NOT NULL,
                constraint PK_STATION_ID PRIMARY KEY(station_id))';
   EXECUTE IMMEDIATE table_name;
end station_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'STATION';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE STATION ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             station_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE STATION CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             station_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------ELECTRICITY_CONSUMPTION TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure electricity_consumption_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE ELECTRICITY_CONSUMPTION(
                 Emeter_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 unit_consumed NUMBER NOT NULL,
                 station_id NUMBER(5),
                 distributor_ID NUMBER(5),
                 constraint PK_EMETER_ID PRIMARY KEY(Emeter_ID),
                 FOREIGN KEY (distributor_ID) REFERENCES DISTRIBUTOR(distributor_ID),
                 FOREIGN KEY (station_id) REFERENCES station(station_id))';
   EXECUTE IMMEDIATE table_name;
end electricity_consumption_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'ELECTRICITY_CONSUMPTION';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE ELECTRICITY_CONSUMPTION ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             electricity_consumption_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE ELECTRICITY_CONSUMPTION CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             electricity_consumption_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------BIKE TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure bike_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE BIKE(
                bike_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                purchase_year DATE NOT NULL,
                available VARCHAR2(4),
                station_id NUMBER,
                constraint PK_BIKE_ID PRIMARY KEY(bike_ID),
                FOREIGN KEY (station_id) REFERENCES station(station_id))';
   EXECUTE IMMEDIATE table_name;
end bike_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'BIKE';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE BIKE ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             bike_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE BIKE CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             bike_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------DEPARTMENT TABLE-------------------------
SET SERVEROUTPUT ON;
create or replace procedure department_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE DEPARTMENT(
                department_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                department_name VARCHAR2(25) NOT NULL,
                constraint PK_DEPARTMENT_ID PRIMARY KEY(department_ID))';
   EXECUTE IMMEDIATE table_name;
end department_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'DEPARTMENT';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE DEPARTMENT ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             department_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE DEPARTMENT CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             department_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------EMPLOYEE TABLE-------------------------
create or replace procedure employee_creation is table_name varchar2(4000);
BEGIN
-- table creation query
    table_name:='create table employee(
                 Employee_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 Employee_Name VARCHAR2(25) NOT NULL,
                 department_ID NUMBER(5),
                 constraint PK_EMPLOYEE_ID PRIMARY KEY(Employee_ID),
                 FOREIGN KEY (department_ID) REFERENCES department(department_ID))';
        EXECUTE IMMEDIATE table_name;
end employee_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'EMPLOYEE';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE EMPLOYEE ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            begin 
             employee_creation;
            end;    
        DBMS_OUTPUT.PUT_LINE('TABLE EMPLOYEE CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        exception 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             employee_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------CLIENT_SUPPORT TABLE-------------------------
create or replace procedure client_support_creation is table_name varchar2(4000);
BEGIN
-- table creation query
    table_name:='create table CLIENT_SUPPORT(
                 Ticket_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 Message VARCHAR(100) NOT NULL,
                 Status VARCHAR(20) NOT NULL,
                 Employee_ID NUMBER,
                 user_id NUMBER,
                 ticket_date TIMESTAMP,
                 constraint PK_TICKET_ID PRIMARY KEY(Ticket_ID),
                 FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),
                 FOREIGN KEY (user_id) REFERENCES USER1(user_id))';
   EXECUTE IMMEDIATE table_name;
end client_support_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'CLIENT_SUPPORT';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE CLIENT_SUPPORT ALREADY EXISTS.');
                DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            begin 
             client_support_creation;
            end;    
        DBMS_OUTPUT.PUT_LINE('TABLE CLIENT_SUPPORT CREATED.');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
        END IF;
        exception 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             client_support_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------MAINTENANCE_TICKET TABLE-------------------------
create or replace procedure maintenance_ticket_creation is table_name varchar2(4000);
BEGIN
-- table creation query
    table_name:='create table MAINTENANCE_TICKET(
                 maintenance_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 issues VARCHAR(100) NOT NULL,
                 status varchar(25) NOT NULL,
                 Employee_ID NUMBER,
                 bike_ID NUMBER,
                 constraint PK_MAINTENANCE_ID PRIMARY KEY(maintenance_ID),
                 FOREIGN KEY (Employee_ID) REFERENCES Employee(Employee_ID),
                 FOREIGN KEY (bike_ID) REFERENCES bike(bike_ID))';
EXECUTE IMMEDIATE table_name;
end maintenance_ticket_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'MAINTENANCE_TICKET';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE MAINTENANCE_TICKET ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            begin 
             maintenance_ticket_creation;
            end;    
        DBMS_OUTPUT.PUT_LINE('TABLE MAINTENANCE_TICKET CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        exception 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             maintenance_ticket_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------RIDE TABLE-------------------------
create or replace procedure ride_creation is table_name varchar2(4000);
BEGIN
-- table creation query
    table_name:= 'create table RIDE(
                  ride_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                  start_time TIMESTAMP NOT NULL,
                  end_time TIMESTAMP NOT NULL,
                  bike_id NUMBER,
                  user_id NUMBER,
                  end_station_id NUMBER,
                  constraint PK_RIDE_ID PRIMARY KEY(ride_ID),
                  FOREIGN KEY (bike_id) REFERENCES Bike(bike_id),
                  FOREIGN KEY (user_id) REFERENCES user1(user_ID),
                  FOREIGN KEY (end_station_id) REFERENCES station(station_id))';
EXECUTE IMMEDIATE table_name;
end ride_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'RIDE';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE RIDE ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            begin 
             ride_creation;
            end;    
        DBMS_OUTPUT.PUT_LINE('TABLE RIDE CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        exception 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             ride_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/


-------------------------TRANSACTION TABLE-------------------------
create or replace procedure transaction_creation is table_name varchar2(4000);
BEGIN
-- table creation query
    table_name:='create table TRANSACTION(
                 transaction_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 status VARCHAR(25) NOT NULL,
                 transaction_method VARCHAR(25) NOT NULL,
                 transaction_date TIMESTAMP NOT NULL,
                 ride_ID NUMBER,
                 constraint PK_TRNASACTION_ID PRIMARY KEY(transaction_ID),
                 FOREIGN KEY (ride_ID) REFERENCES ride(ride_ID))';
EXECUTE IMMEDIATE table_name;
end transaction_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'TRANSACTION';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE TRANSACTION ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            begin 
             transaction_creation;
            end;    
        DBMS_OUTPUT.PUT_LINE('TABLE TRANSACTION CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        exception 
          when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             transaction_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

-------------------------REVIEW TABLE-------------------------
create or replace procedure review_creation is table_name varchar2(4000);
BEGIN
-- table creation query
    table_name:='create table REVIEW(
                 review_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                 rating NUMBER(1) NOT NULL,
                 message VARCHAR2(100) NOT NULL,
                 review_time TIMESTAMP NOT NULL,
                 ride_id NUMBER(5),
                 constraint PK_REVIEW_ID PRIMARY KEY(review_ID),
                 FOREIGN KEY (ride_id) REFERENCES ride(ride_id))';
 EXECUTE IMMEDIATE table_name;
end review_creation;
/
DECLARE
        t_name varchar2(50);
        cnt NUMBER;
    BEGIN
        t_name := 'REVIEW';
        SELECT count(*) into cnt FROM user_tables where table_name = t_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE REVIEW ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            begin 
             review_creation;
            end;    
        DBMS_OUTPUT.PUT_LINE('TABLE REVIEW CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        exception 
           when no_data_found then
           DBMS_OUTPUT.PUT_LINE('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             review_creation;
             DBMS_OUTPUT.PUT_LINE('Hence,Table Created');
             DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                DBMS_OUTPUT.PUT_LINE('Something went wrong!');
                DBMS_OUTPUT.PUT_LINE(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

--------------------------------------------------------------------------INDEX SCRIPT (PROCEDURE)--------------------------------------------------------------------------

-------------------------STATION_NAME INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX sname_idx ON STATION(STATION_NAME)';
dbms_output.put_line( 'Created index sname_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index sname_idx already present' );
null;
end;
/

-------------------------LATITUDE INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX slat_idx ON STATION(LATITUDE)';
dbms_output.put_line( 'Created index slat_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index slat_idx already present' );
null;
end;
/

-------------------------LONGITUDE INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX slong_idx ON STATION(LONGITUDE)';
dbms_output.put_line( 'Created index slong_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index slong_idx already present' );
null;
end;
/

-------------------------USER_NAME INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX usname_idx ON USER1(USER_NAME)';
dbms_output.put_line( 'Created index usname_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index usname_idx already present' );
null;
end;
/

-------------------------EMAIL INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX email_idx ON USER1(EMAIL)';
dbms_output.put_line( 'Created index email_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index email_idx already present' );
null;
end;
/

-------------------------PHONE_NUMBER INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX phone_idx ON USER1(PHONE_NUMBER)';
dbms_output.put_line( 'Created index phone_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index phone_idx already present' );
null;
end;
/

-------------------------DISTRIBUTOR_NAME INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX distname_idx ON DISTRIBUTOR(DISTRIBUTOR_NAME)';
dbms_output.put_line( 'Created index distname_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index distname_idx already present' );
null;
end;
/

-------------------------DEPARTMENT_NAME INDEX-------------------------
SET SERVEROUTPUT ON;
declare
already_exists exception;
pragma exception_init( already_exists, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX deptname_idx ON DEPARTMENT(DEPARTMENT_NAME)';
dbms_output.put_line( 'Created index deptname_idx' );
exception
when already_exists then
dbms_output.put_line( 'Index deptname_idx already present' );
null;
end;
/